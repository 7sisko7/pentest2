// Variant used by checkDblSubmit()
var isFormSubmitted = false;

// Function that returns false if isFormSubmitted is true
function checkDblSubmit() {
    if (isFormSubmitted) {
        return false;
    }
    else {
        isFormSubmitted = true;
        return true;
    }
}

// function used to swap images (rollovers)
function move_in(img_name,img_src) {
document[img_name].src=img_src;
}

function move_out(img_name,img_src) {
document[img_name].src=img_src;
}

// function used to change the row colors of tables
// onmouseover, and change them back on mouseout.
function setPointer(theRow, thePointerColor)
{
    if (thePointerColor == '' || typeof(theRow.style) == 'undefined') {
        return false;
    }
    if (typeof(document.getElementsByTagName) != 'undefined') {
        var theCells = theRow.getElementsByTagName('td');
    }
    else if (typeof(theRow.cells) != 'undefined') {
        var theCells = theRow.cells;
    }
    else {
        return false;
    }

    var rowCellsCnt  = theCells.length;
    for (var c = 0; c < rowCellsCnt; c++) {
        theCells[c].style.backgroundColor = thePointerColor;
    }

    return true;
} // end of the 'setPointer()' function

// Function to generate a popup window of set dimensions
function popup(url, windowName, height, width) {
    if (height == null || height.length == 0) {
        height = 450;
    }
    if (width == null || width.length == 0) {
        width = 500;
    }
    window.open(url,windowName,"directories=no,height=" + height + ",width=" + width + ",menubar=no,resizable=yes,scrollbars=yes,status=no,toolbar=no");
    //window.open(url,windowName).focus(); // causes flicker and extra page unload/load
    //return true; // Not sure what this is supposed to do
}


// Function to fetch an object referenced by either the name or id tag attributes
// from the dom.
// Note: The assumption is made that object names are unique within document scope
function getNamedObj(name) {
    if (document.getElementById && document.getElementById(name) != null) {
        return document.getElementById(name);
    }
    else if (document.getElementsByName && document.getElementsByName(name) != null) {
        return document.getElementsByName(name).item(0);
    }
    else if (document.all){
        return document.all[name];
    }
    else {
        return null;
    }
}

// function to open a whois window
function doWhois(dom) {
    window.open(dom, "Whois", "directories=no,height=450,width=575,menubar=no,resizeable=yes,scrollbars=yes,status=no,toolbar=no");
}

// function to scan a form for changes in its elements
function isFormChanged(formName) {

    var objForm = getNamedObj(formName);

    for (var i=0;i<objForm.elements.length;i++) {

		if (objForm.elements[i].defaultChecked != null) {
        	if (objForm.elements[i].defaultChecked != objForm.elements[i].checked) {
            	return true;
         	}
         }

        if (objForm.elements[i].defaultValue != null) {
            if (objForm.elements[i].defaultValue != objForm.elements[i].value) {
                return true;
            }
        }

        if (objForm.elements[i].selectedIndex != null && objForm.elements[i].selectedIndex != -1) {
            var intSelIndex = objForm.elements[i].selectedIndex + 0;
            var intDefIndex = -1;
            
            for (var j=0;j<objForm.elements[i].options.length;j++) {
                if (objForm.elements[i].options[j].defaultSelected) {
                    intDefIndex = j + 0;
                }
            }
            if (intDefIndex == -1) {
                intDefIndex = 0;
            }

            if (intSelIndex != intDefIndex) {
                return true;
            }

        }
    }

    return false;

}

// A few constants
var searchFirstText = "Searches must be run before being saved.";

function printPage() {
	window.print();
	return false;
} // end printPage

// this file contains a function to disable clicks on
// particular controls to avoid overloaded inputs.

var linkDisabled = false;

function checkLink() {

	if (linkDisabled) {
		// link has been clicked already
		// return without processing the
		// remainder of the onClick event
		return false;
	}
	
	else if (!linkDisabled) {
		// link has not been clicked yet
		// disable link, then return to
		// finish processing onClick event
		linkDisabled = true;
		return true;
	}
}

// Function that returns false if the key associated with an event was the "enter" key
function swallowEnterKey(objEvent) {
    var keyCode = window.event ? window.event.keyCode : objEvent.keyCode ? objEvent.keyCode : objEvent.which ? objEvent.which : objEvent.charCode;
    if (keyCode == 13) { // Enter was pressed
        return false;
    }
	return true;
}

function copyFormValues(strSourceFormId, objTargetForm) {
    var objSourceForm = document.getElementById(strSourceFormId);
    scrubForm(objTargetForm, objSourceForm);
	for (var i=0; i<objSourceForm.length; i++) {
		var strSourceName = objSourceForm.elements[i].name;
		switch (objSourceForm.elements[i].type) {
			case "hidden" :
			case "select-one" :
			case "text" :
			case "textarea" :
				applyValueToElement(objTargetForm, objSourceForm.elements[i].name, objSourceForm.elements[i].value);
			    break;
            case "radio" :
			case "checkbox" :
			    if (objSourceForm.elements[i].checked) {
			    	applyValueToElement(objTargetForm, objSourceForm.elements[i].name, objSourceForm.elements[i].value);
			    }
			    break;
			default :
			    alert("Unsupported element type = " + objSourceForm.elements[i].type);
		}
	}
}

function scrubForm(objTargetForm, objSourceForm) {
	for (var i=0; i<objSourceForm.length; i++) {
		var strName = objSourceForm.elements[i].name;
		for (var j=0; j<objTargetForm.length; j++) {
	        if (objTargetForm.elements[j].name == strName) {
				switch (objTargetForm.elements[j].type) {
					case "hidden" :
					case "select-one" :
					case "text" :
					case "textarea" :
					    objTargetForm.elements[j].value = "";
					    break;
					case "radio" :
					case "checkbox" :
				        objTargetForm.elements[j].checked = false;
					    break;
					default :
					    alert("Unsupported element type for assignment = " + objTargetForm.elements[j].type);
				}
                break;
			}
		}
	}
}

function applyValueToElement(objTargetForm, strName, strValue) {
	for (var i=0; i<objTargetForm.length; i++) {
	    if (objTargetForm.elements[i].name == strName) {
			switch (objTargetForm.elements[i].type) {
				case "hidden" :
				case "select-one" :
				case "text" :
				case "textarea" :
				    if (objTargetForm.elements[i].value == "") {
				    	objTargetForm.elements[i].value = strValue;
				    	return;
				    }
				    break;
				case "radio" :
				case "checkbox" :
				    if (objTargetForm.elements[i].value == strValue) {
				        objTargetForm.elements[i].checked = true;
				        return;
				    }
				    break;
				default :
				    alert("Unsupported element type for assignment = " + objTargetForm.elements[i].type);
			}
		}
	}
}

// Function to convert a currency string to a number
function stripCurrencyFormat(value) {
    var stripped = (value + "").replace(/\,/g,"");
    stripped = stripped.replace(/^\$+/,"");
    stripped = stripped.replace(/^\$+/g,"");
    if(isNaN(stripped)) {
        throw value + " is not a number.";
    }
    return stripped;
}

// Function to format a number to a currency string
function currencyFormat(value) {
    var num = stripCurrencyFormat(value);
    var isPositive = (num == (num = Math.abs(num)));
    var dollars = Math.floor((num*100 + 0.5)/100) + "";
    var cents = Math.floor((num*100 + 0.5)%100);
    if (cents < 10) {
        cents = "0" + cents;
    }
    for (var i=0;i<Math.floor((dollars.length-(1+i))/3);i++) {
        dollars = dollars.substring(0,dollars.length-(4*i+3)) + ',' + dollars.substring(dollars.length-(4*i+3));
    }
    var result = (isPositive ? "" : "-") + '$' + dollars + '.' + cents;
    return result;
}

// Function that does nothing
function jsDrone() {
    // nothing is done by design
}

//dropdown menu js
function addLoadEvent(func) {
  var oldonload = window.onload;
  if (typeof window.onload != 'function') {
    window.onload = func;
  } else {
    window.onload = function() {
      if (oldonload) {
        oldonload();
      }
      func();
    }
  }
}

startList = function() {
  if (document.all&&document.getElementById) {
    navRoot = document.getElementById("nav");
    if(navRoot != null){
      for (i=0; i<navRoot.childNodes.length; i++) {
        node = navRoot.childNodes[i];
        if (node.nodeName=="LI") {
          node.onmouseover=function() {
            this.className+=" over";
          }
          node.onmouseout=function() {
            this.className=this.className.replace(" over", "");
          }
        }
      }
    }
  }
}
addLoadEvent(startList);


// This is a bunch of js I stole to get help popups on domain details page 
// getAnchorPosition(anchorname)
//   This function returns an object having .x and .y properties which are the coordinates
//   of the named anchor, relative to the page.
function getAnchorPosition(anchorname) {
	// This function will return an Object with x and y properties
	var useWindow=false;
	var coordinates=new Object();
	var x=0,y=0;
	// Browser capability sniffing
	var use_gebi=false, use_css=false, use_layers=false;
	if (document.getElementById) { use_gebi=true; }
	else if (document.all) { use_css=true; }
	else if (document.layers) { use_layers=true; }
	// Logic to find position
 	if (use_gebi && document.all) {
		x=AnchorPosition_getPageOffsetLeft(document.all[anchorname]);
		y=AnchorPosition_getPageOffsetTop(document.all[anchorname]);
		}
	else if (use_gebi) {
		var o=document.getElementById(anchorname);
		x=AnchorPosition_getPageOffsetLeft(o);
		y=AnchorPosition_getPageOffsetTop(o);
		}
 	else if (use_css) {
		x=AnchorPosition_getPageOffsetLeft(document.all[anchorname]);
		y=AnchorPosition_getPageOffsetTop(document.all[anchorname]);
		}
	else if (use_layers) {
		var found=0;
		for (var i=0; i<document.anchors.length; i++) {
			if (document.anchors[i].name==anchorname) { found=1; break; }
			}
		if (found==0) {
			coordinates.x=0; coordinates.y=0; return coordinates;
			}
		x=document.anchors[i].x;
		y=document.anchors[i].y;
		}
	else {
		coordinates.x=0; coordinates.y=0; return coordinates;
		}
	coordinates.x=x;
	coordinates.y=y;
	return coordinates;
	}

// getAnchorWindowPosition(anchorname)
//   This function returns an object having .x and .y properties which are the coordinates
//   of the named anchor, relative to the window
function getAnchorWindowPosition(anchorname) {
	var coordinates=getAnchorPosition(anchorname);
	var x=0;
	var y=0;
	if (document.getElementById) {
		if (isNaN(window.screenX)) {
			x=coordinates.x-document.body.scrollLeft+window.screenLeft;
			y=coordinates.y-document.body.scrollTop+window.screenTop;
			}
		else {
			x=coordinates.x+window.screenX+(window.outerWidth-window.innerWidth)-window.pageXOffset;
			y=coordinates.y+window.screenY+(window.outerHeight-24-window.innerHeight)-window.pageYOffset;
			}
		}
	else if (document.all) {
		x=coordinates.x-document.body.scrollLeft+window.screenLeft;
		y=coordinates.y-document.body.scrollTop+window.screenTop;
		}
	else if (document.layers) {
		x=coordinates.x+window.screenX+(window.outerWidth-window.innerWidth)-window.pageXOffset;
		y=coordinates.y+window.screenY+(window.outerHeight-24-window.innerHeight)-window.pageYOffset;
		}
	coordinates.x=x;
	coordinates.y=y;
	return coordinates;
	}

// Functions for IE to get position of an object
function AnchorPosition_getPageOffsetLeft (el) {
	var ol=el.offsetLeft;
	while ((el=el.offsetParent) != null) { ol += el.offsetLeft; }
	return ol;
	}
function AnchorPosition_getWindowOffsetLeft (el) {
	return AnchorPosition_getPageOffsetLeft(el)-document.body.scrollLeft;
	}	
function AnchorPosition_getPageOffsetTop (el) {
	var ot=el.offsetTop;
	while((el=el.offsetParent) != null) { ot += el.offsetTop; }
	return ot;
	}
function AnchorPosition_getWindowOffsetTop (el) {
	return AnchorPosition_getPageOffsetTop(el)-document.body.scrollTop;
	}

// Set the position of the popup window based on the anchor
function PopupWindow_getXYPosition(anchorname) {
	var coordinates;
	if (this.type == "WINDOW") {
		coordinates = getAnchorWindowPosition(anchorname);
		}
	else {
		coordinates = getAnchorPosition(anchorname);
		}
	this.x = coordinates.x;
	this.y = coordinates.y;
	}
// Set width/height of DIV/popup window
function PopupWindow_setSize(width,height) {
	this.width = width;
	this.height = height;
	}
// Fill the window with contents
function PopupWindow_populate(contents) {
	this.contents = contents;
	this.populated = false;
	}
// Set the URL to go to
function PopupWindow_setUrl(url) {
	this.url = url;
	}
// Set the window popup properties
function PopupWindow_setWindowProperties(props) {
	this.windowProperties = props;
	}
// Refresh the displayed contents of the popup
function PopupWindow_refresh() {
	if (this.divName != null) {
		// refresh the DIV object
		if (this.use_gebi) {
			document.getElementById(this.divName).innerHTML = this.contents;
			}
		else if (this.use_css) { 
			document.all[this.divName].innerHTML = this.contents;
			}
		else if (this.use_layers) { 
			var d = document.layers[this.divName]; 
			d.document.open();
			d.document.writeln(this.contents);
			d.document.close();
			}
		}
	else {
		if (this.popupWindow != null && !this.popupWindow.closed) {
			if (this.url!="") {
				this.popupWindow.location.href=this.url;
				}
			else {
				this.popupWindow.document.open();
				this.popupWindow.document.writeln(this.contents);
				this.popupWindow.document.close();
			}
			this.popupWindow.focus();
			}
		}
	}
// Position and show the popup, relative to an anchor object
function PopupWindow_showPopup(anchorname) {
	this.getXYPosition(anchorname);
	this.x += this.offsetX;
	this.y += this.offsetY;
	if (!this.populated && (this.contents != "")) {
		this.populated = true;
		this.refresh();
		}
	if (this.divName != null) {
		// Show the DIV object
		if (this.use_gebi) {
			document.getElementById(this.divName).style.left = this.x + "px";
			document.getElementById(this.divName).style.top = this.y + "px";
			document.getElementById(this.divName).style.visibility = "visible";
			}
		else if (this.use_css) {
			document.all[this.divName].style.left = this.x;
			document.all[this.divName].style.top = this.y;
			document.all[this.divName].style.visibility = "visible";
			}
		else if (this.use_layers) {
			document.layers[this.divName].left = this.x;
			document.layers[this.divName].top = this.y;
			document.layers[this.divName].visibility = "visible";
			}
		}
	else {
		if (this.popupWindow == null || this.popupWindow.closed) {
			// If the popup window will go off-screen, move it so it doesn't
			if (this.x<0) { this.x=0; }
			if (this.y<0) { this.y=0; }
			if (screen && screen.availHeight) {
				if ((this.y + this.height) > screen.availHeight) {
					this.y = screen.availHeight - this.height;
					}
				}
			if (screen && screen.availWidth) {
				if ((this.x + this.width) > screen.availWidth) {
					this.x = screen.availWidth - this.width;
					}
				}
			var avoidAboutBlank = window.opera || ( document.layers && !navigator.mimeTypes['*'] ) || navigator.vendor == 'KDE' || ( document.childNodes && !document.all && !navigator.taintEnabled );
			this.popupWindow = window.open(avoidAboutBlank?"":"about:blank","window_"+anchorname,this.windowProperties+",width="+this.width+",height="+this.height+",screenX="+this.x+",left="+this.x+",screenY="+this.y+",top="+this.y+"");
			}
		this.refresh();
		}
	}
// Hide the popup
function PopupWindow_hidePopup() {
	if (this.divName != null) {
		if (this.use_gebi) {
			document.getElementById(this.divName).style.visibility = "hidden";
			}
		else if (this.use_css) {
			document.all[this.divName].style.visibility = "hidden";
			}
		else if (this.use_layers) {
			document.layers[this.divName].visibility = "hidden";
			}
		}
	else {
		if (this.popupWindow && !this.popupWindow.closed) {
			this.popupWindow.close();
			this.popupWindow = null;
			}
		}
	}
// Pass an event and return whether or not it was the popup DIV that was clicked
function PopupWindow_isClicked(e) {
	if (this.divName != null) {
		if (this.use_layers) {
			var clickX = e.pageX;
			var clickY = e.pageY;
			var t = document.layers[this.divName];
			if ((clickX > t.left) && (clickX < t.left+t.clip.width) && (clickY > t.top) && (clickY < t.top+t.clip.height)) {
				return true;
				}
			else { return false; }
			}
		else if (document.all) { // Need to hard-code this to trap IE for error-handling
			var t = window.event.srcElement;
			while (t.parentElement != null) {
				if (t.id==this.divName) {
					return true;
					}
				t = t.parentElement;
				}
			return false;
			}
		else if (this.use_gebi && e) {
			var t = e.originalTarget;
			while (t.parentNode != null) {
				if (t.id==this.divName) {
					return true;
					}
				t = t.parentNode;
				}
			return false;
			}
		return false;
		}
	return false;
	}

// Check an onMouseDown event to see if we should hide
function PopupWindow_hideIfNotClicked(e) {
	if (this.autoHideEnabled && !this.isClicked(e)) {
		this.hidePopup();
		}
	}
// Call this to make the DIV disable automatically when mouse is clicked outside it
function PopupWindow_autoHide() {
	this.autoHideEnabled = true;
	}
// This global function checks all PopupWindow objects onmouseup to see if they should be hidden
function PopupWindow_hidePopupWindows(e) {
	for (var i=0; i<popupWindowObjects.length; i++) {
		if (popupWindowObjects[i] != null) {
			var p = popupWindowObjects[i];
			p.hideIfNotClicked(e);
			}
		}
	}
// Run this immediately to attach the event listener
function PopupWindow_attachListener() {
	if (document.layers) {
		document.captureEvents(Event.MOUSEUP);
		}
	window.popupWindowOldEventListener = document.onmouseup;
	if (window.popupWindowOldEventListener != null) {
		document.onmouseup = new Function("window.popupWindowOldEventListener(); PopupWindow_hidePopupWindows();");
		}
	else {
		document.onmouseup = PopupWindow_hidePopupWindows;
		}
	}
// CONSTRUCTOR for the PopupWindow object
// Pass it a DIV name to use a DHTML popup, otherwise will default to window popup
function PopupWindow() {
	if (!window.popupWindowIndex) { window.popupWindowIndex = 0; }
	if (!window.popupWindowObjects) { window.popupWindowObjects = new Array(); }
	if (!window.listenerAttached) {
		window.listenerAttached = true;
		PopupWindow_attachListener();
		}
	this.index = popupWindowIndex++;
	popupWindowObjects[this.index] = this;
	this.divName = null;
	this.popupWindow = null;
	this.width=0;
	this.height=0;
	this.populated = false;
	this.visible = false;
	this.autoHideEnabled = false;
	
	this.contents = "";
	this.url="";
	this.windowProperties="toolbar=no,location=no,status=no,menubar=no,scrollbars=auto,resizable,alwaysRaised,dependent,titlebar=no";
	if (arguments.length>0) {
		this.type="DIV";
		this.divName = arguments[0];
		}
	else {
		this.type="WINDOW";
		}
	this.use_gebi = false;
	this.use_css = false;
	this.use_layers = false;
	if (document.getElementById) { this.use_gebi = true; }
	else if (document.all) { this.use_css = true; }
	else if (document.layers) { this.use_layers = true; }
	else { this.type = "WINDOW"; }
	this.offsetX = 0;
	this.offsetY = 0;
	// Method mappings
	this.getXYPosition = PopupWindow_getXYPosition;
	this.populate = PopupWindow_populate;
	this.setUrl = PopupWindow_setUrl;
	this.setWindowProperties = PopupWindow_setWindowProperties;
	this.refresh = PopupWindow_refresh;
	this.showPopup = PopupWindow_showPopup;
	this.hidePopup = PopupWindow_hidePopup;
	this.setSize = PopupWindow_setSize;
	this.isClicked = PopupWindow_isClicked;
	this.autoHide = PopupWindow_autoHide;
	this.hideIfNotClicked = PopupWindow_hideIfNotClicked;
	}

function ajaxSendClientTimeZone(offset)
{
	jQuery.ajax({
	url: "/sessionTimeZone.sn",
    type: "post",
    //dataType : 'json',
		data:{ "ajaxcall": "true",
			   "offset": offset
			},
		success: function(msg){
			//alert("success:" + msg);
		}
		});	
}